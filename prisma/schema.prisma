generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserSex {
  MALE
  FEMALE
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id         String       @id
  username   String       @unique
  name       String
  surname    String
  email      String?      @unique
  phone      String?      @unique
  address    String
  img        String?
  bloodType  String
  enum       UserSex
  createdAt  DateTime     @default(now())
  parentId   String
  parent     Parent       @relation(fields: [parentId], references: [id])
  classId    Int
  class      Class        @relation(fields: [classId], references: [id])
  gradeId    Int
  grade      Grade        @relation(fields: [gradeId], references: [id])
  attendance Attendance[]
  results    Result[]
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  enum      UserSex
  createdAt DateTime  @default(now())
  subject   Subject[]
  lessons   Lesson[]
  classes   Class[]
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int

  students Student[]
  classes  Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  lessons      Lesson[]
  student      Student[]
  superVisorId String
  superVisor   Teacher        @relation(fields: [superVisorId], references: [id])
  gradeId      Int
  grade        Grade          @relation(fields: [gradeId], references: [id])
  exams        Exam[]
  assignments  Assignment[]
  attendance   Attendance[]
  announcement Announcement[]
  events       Event[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  endDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
  Class    Class?   @relation(fields: [classId], references: [id])
  classId  Int?
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  lessonId Int
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  Class    Class? @relation(fields: [classId], references: [id])
  classId  Int?
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
  Class    Class?   @relation(fields: [classId], references: [id])
  classId  Int?
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])

  classId Int
  class   Class @relation(fields: [classId], references: [id])

  teacherId  String
  teacher    Teacher      @relation(fields: [teacherId], references: [id])
  Assignment Assignment[]
  Attendance Attendance[]
  Exam       Exam[]
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  data        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}
